{"title":"两数之和 leetCode 1","uid":"b529ed6ebbafadec850827aed7fed9b6","slug":"695岛屿的最大面积","date":"2021-09-02T03:08:22.000Z","updated":"2021-09-02T03:18:57.712Z","comments":true,"path":"api/articles/695岛屿的最大面积.json","keywords":null,"cover":"/images/banners/VCG41154059609.jpg","content":"<h3 id=\"给定一个包含了一些-0-和-1-的非空二维数组-grid-。一个-岛屿-是由一些相邻的-1-代表土地-构成的组合，这里的「相邻」要求两个-1-必须在水平或者竖直方向上相邻。你可以假设-grid-的四个边缘都被-0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。-如果没有岛屿，则返回面积为-0-。\"><a href=\"#给定一个包含了一些-0-和-1-的非空二维数组-grid-。一个-岛屿-是由一些相邻的-1-代表土地-构成的组合，这里的「相邻」要求两个-1-必须在水平或者竖直方向上相邻。你可以假设-grid-的四个边缘都被-0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。-如果没有岛屿，则返回面积为-0-。\" class=\"headerlink\" title=\"给定一个包含了一些 0 和 1 的非空二维数组 grid 。一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)\"></a>给定一个包含了一些 0 和 1 的非空二维数组 grid 。一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)</h3><p><strong>示例 1:</strong></p>\n<p>[[0,0,1,0,0,0,0,1,0,0,0,0,0],<br> [0,0,0,0,0,0,0,1,1,1,0,0,0],<br> [0,1,1,0,1,0,0,0,0,0,0,0,0],<br> [0,1,0,0,1,1,0,0,1,0,1,0,0],<br> [0,1,0,0,1,1,0,0,1,1,1,0,0],<br> [0,0,0,0,0,0,0,0,0,0,1,0,0],<br> [0,0,0,0,0,0,0,1,1,1,0,0,0],<br> [0,0,0,0,0,0,0,1,1,0,0,0,0]]<br>对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。</p>\n<p><strong>示例 2:</strong></p>\n<p>[[0,0,0,0,0,0,0,0]]<br>对于上面这个给定的矩阵, 返回 0</p>\n<p>有好长一段时间没有写过算法博客了，最近突然对自己有种瓶颈期的感觉，调整了一下自己，沉下心来，一步一步对中等题进行分析，不要被题解的长度给吓到了，拿一张白纸，一行一行代码去解读，最后理解，感觉自己又可以了，加油干；</p>\n<p>算法都是一些重复了操作，只需要理解前几步，把边界找好，其实就可以很好的去理解一些题目。</p>\n<h3 id=\"解法一-、深度优先搜索\"><a href=\"#解法一-、深度优先搜索\" class=\"headerlink\" title=\"解法一 、深度优先搜索\"></a>解法一 、深度优先搜索</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">maxAreaOfIsland</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 遍历图</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 每一个值去找他的上下左右</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ans\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">,</span> cur_i<span class=\"token punctuation\">,</span> cur_j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> cur_i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> cur_j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> cur_i <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> cur_j <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>cur_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\"># 遍历过的，直接置为0</span>\n    grid<span class=\"token punctuation\">[</span>cur_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        ans <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> cur_i<span class=\"token operator\">+</span>x<span class=\"token punctuation\">,</span> cur_j<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ans\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"解法二、深度优先搜索加栈\"><a href=\"#解法二、深度优先搜索加栈\" class=\"headerlink\" title=\"解法二、深度优先搜索加栈\"></a>解法二、深度优先搜索加栈</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxAreaOfIsland</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> l <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            area <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 存放没有访问过的土地</span>\n            <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n                cur_i<span class=\"token punctuation\">,</span> cur_j <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> cur_i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> cur_j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> cur_i <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> cur_j <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> grid<span class=\"token punctuation\">[</span>cur_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">continue</span>\n                area <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                grid<span class=\"token punctuation\">[</span>cur_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token comment\"># 遍历他的上下左右，把符合条件的，加入到栈中</span>\n                <span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cur_i <span class=\"token operator\">+</span> x<span class=\"token punctuation\">,</span> cur_j <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ans <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"给定一个包含了一些 0 和 1 的非空二维数组 grid 。一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。(如果没有...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":15,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":15,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E4%BA%86%E4%B8%80%E4%BA%9B-0-%E5%92%8C-1-%E7%9A%84%E9%9D%9E%E7%A9%BA%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84-grid-%E3%80%82%E4%B8%80%E4%B8%AA-%E5%B2%9B%E5%B1%BF-%E6%98%AF%E7%94%B1%E4%B8%80%E4%BA%9B%E7%9B%B8%E9%82%BB%E7%9A%84-1-%E4%BB%A3%E8%A1%A8%E5%9C%9F%E5%9C%B0-%E6%9E%84%E6%88%90%E7%9A%84%E7%BB%84%E5%90%88%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E3%80%8C%E7%9B%B8%E9%82%BB%E3%80%8D%E8%A6%81%E6%B1%82%E4%B8%A4%E4%B8%AA-1-%E5%BF%85%E9%A1%BB%E5%9C%A8%E6%B0%B4%E5%B9%B3%E6%88%96%E8%80%85%E7%AB%96%E7%9B%B4%E6%96%B9%E5%90%91%E4%B8%8A%E7%9B%B8%E9%82%BB%E3%80%82%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%81%87%E8%AE%BE-grid-%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%BE%B9%E7%BC%98%E9%83%BD%E8%A2%AB-0%EF%BC%88%E4%BB%A3%E8%A1%A8%E6%B0%B4%EF%BC%89%E5%8C%85%E5%9B%B4%E7%9D%80%E3%80%82%E6%89%BE%E5%88%B0%E7%BB%99%E5%AE%9A%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E5%B2%9B%E5%B1%BF%E9%9D%A2%E7%A7%AF%E3%80%82-%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%B2%9B%E5%B1%BF%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9E%E9%9D%A2%E7%A7%AF%E4%B8%BA-0-%E3%80%82\"><span class=\"toc-text\">给定一个包含了一些 0 和 1 的非空二维数组 grid 。一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80-%E3%80%81%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">解法一 、深度优先搜索</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%BA%8C%E3%80%81%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E5%8A%A0%E6%A0%88\"><span class=\"toc-text\">解法二、深度优先搜索加栈</span></a></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"蒙特卡洛树搜索MCTS","uid":"e4486b46c423239be00f208745edcc94","slug":"蒙特卡洛树搜索","date":"2021-08-03T02:56:38.000Z","updated":"2021-08-03T03:35:57.812Z","comments":true,"path":"api/articles/蒙特卡洛树搜索.json","keywords":null,"cover":"/images/banners/VCG41N1070447322.jpg","text":"1、蒙特卡洛树搜索（The Monte Carlo Tree Search） 蒙特卡罗树搜索是一类树搜索算法的统称，简称MCTS。它是一种用于某些决策过程的启发搜索算法，且在搜索空间巨大的游戏中会比较有效。 从全局来看，蒙特卡洛树搜索的主要目标是：给定一个游戏状态来选择最佳的下一...","link":"","photos":[],"count_time":{"symbolsCount":529,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":15,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":15,"path":"api/tags/Python.json"},{"name":"MCTS","slug":"MCTS","count":1,"path":"api/tags/MCTS.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true}}
{"title":"1734解码异或的排列","uid":"378da439daa2ee05d165c8ebd4326ea7","slug":"1734解码异或的排列","date":"2021-05-12T04:29:27.000Z","updated":"2021-05-12T06:49:10.106Z","comments":true,"path":"api/articles/1734解码异或的排列.json","keywords":null,"cover":"/images/banners/VCG41N1126025444.jpg","content":"<h3 id=\"给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\"><a href=\"#给你一个整数数组-perm-，它是前-n-个正整数的排列，且-n-是个-奇数-。它被加密成另一个长度为-n-1-的整数数组-encoded-，满足-encoded-i-perm-i-XOR-perm-i-1-。比方说，如果-perm-1-3-2-，那么-encoded-2-1-。给你-encoded-数组，请你返回原始数组-perm-。题目保证答案存在且唯一。\" class=\"headerlink\" title=\"给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。\"></a>给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 encoded = [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。</h3><p><strong>示例 1：</strong><br>输入：encoded = [3,1]<br>输出：[1,2,3]<br>解释：如果 perm = [1,2,3] ，那么 encoded = [1 XOR 2,2 XOR 3] = [3,1]</p>\n<p><strong>示例 2：</strong><br>输入：encoded = [6,5,4,6]<br>输出：[2,4,1,5,3]</p>\n<p><strong>此题是leetcode 1720的升级版</strong></p>\n<h2 id=\"一、解法一：通过数据解题思路（异或运算）\"><a href=\"#一、解法一：通过数据解题思路（异或运算）\" class=\"headerlink\" title=\"一、解法一：通过数据解题思路（异或运算）\"></a>一、解法一：通过数据解题思路（异或运算）</h2><h3 id=\"1-1-思路\"><a href=\"#1-1-思路\" class=\"headerlink\" title=\"1.1 思路\"></a>1.1 思路</h3><p>我在LeetCode上面看题解的时候，看得好吃力，完全没看懂，然后跟着思路用纸写一遍，突然就懂了。话不多说，开始：</p>\n<p><strong>我们知道异或运算有如下性质（不懂的话，可以查一下，不多做解释了）：</strong></p>\n<ol>\n<li>相同数值异或，结果为 0</li>\n<li>任意数值与 0 进行异或，结果为数值本身</li>\n<li>异或本身满足交换律</li>\n</ol>\n<p><strong>⊕：代表异或</strong></p>\n<p><strong>本题需要我们求perm（需求一步一步往下看，不然会不懂）</strong></p>\n<ol>\n<li><p>根据题目意思 ，假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n</li>\n<li><p>先求出perm[0]  ,    perm[0] =   (perm[0] ⊕ perm[1] … ⊕ perm[n] )  ⊕    (perm[1] …⊕ perm[n] )   ,根据相同值异或为0性质，异或结果就是perm[0]，看懂了再往下走</p>\n<ul>\n<li>此时我们只需要求出**(perm[0] ⊕ perm[1] … ⊕ perm[n] )** 和**(perm[1] …⊕ perm[n] )<strong>的值，他俩异或的结果就可以求出</strong>perm[0]**</li>\n</ul>\n</li>\n<li><p>求第2步的两个值：</p>\n<ul>\n<li><strong>(perm[0] ⊕ perm[1] … ⊕ perm[n] )<strong>，题目已经告诉我们的，他是前 n 个正整数的排列，假如n=5 ,他结果就是</strong>1⊕ 2⊕ 3⊕ 4⊕ 5</strong>,</li>\n<li><strong>(perm[1] …⊕ perm[n] )</strong>,这个值看如下举例：</li>\n</ul>\n<p>假设 perm = [a, b, c, d, e]，那么 encoded = [ab, bc, cd, de]</p>\n<p><strong>perm[1] ⊕ perm[2] …⊕ perm[n]  =  encoded[1] ⊕ encoded[3]   (步长为2)</strong></p>\n<ul>\n<li>encoded都是题目给出来的值 ，是不是很好求</li>\n<li>这样你就可以结合第二步，求出**perm[0]**的值</li>\n</ul>\n</li>\n<li><p>题目给出<strong>encoded[i] = perm[i] ⊕ perm[i + 1]</strong>    可以理解为：<strong>encoded[i] = perm[i] ⊕ perm[i - 1]</strong>    一样的意思， 只是我把下标 <strong>i</strong>理解为当前这个数和当前数的前一个</p>\n<ul>\n<li>​    encoded[0] = perm[0] ⊕ perm[1]  两边同时异或 perm[1],  根据相同为0，得出如下</li>\n<li>​    perm[1] = encoded[0] ⊕ perm[0]</li>\n<li>​    perm[i] = encoded[i] ⊕ perm[i - 1]</li>\n</ul>\n</li>\n</ol>\n<p><strong>最后再去看代码，就很清晰了，总结的不好的，欢迎留言指正；</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> encoded<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        \n        perm_total <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>xor<span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        child_total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            child_total <span class=\"token operator\">^</span><span class=\"token operator\">=</span> encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n           \n        perm <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>perm_total <span class=\"token operator\">^</span> child_total<span class=\"token punctuation\">]</span>\n        \n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            perm<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> perm<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> perm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","text":"给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":10,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":9,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":11,"path":"api/tags/Python.json"},{"name":"异或","slug":"异或","count":2,"path":"api/tags/异或.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84-perm-%EF%BC%8C%E5%AE%83%E6%98%AF%E5%89%8D-n-%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0%E7%9A%84%E6%8E%92%E5%88%97%EF%BC%8C%E4%B8%94-n-%E6%98%AF%E4%B8%AA-%E5%A5%87%E6%95%B0-%E3%80%82%E5%AE%83%E8%A2%AB%E5%8A%A0%E5%AF%86%E6%88%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E9%95%BF%E5%BA%A6%E4%B8%BA-n-1-%E7%9A%84%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84-encoded-%EF%BC%8C%E6%BB%A1%E8%B6%B3-encoded-i-perm-i-XOR-perm-i-1-%E3%80%82%E6%AF%94%E6%96%B9%E8%AF%B4%EF%BC%8C%E5%A6%82%E6%9E%9C-perm-1-3-2-%EF%BC%8C%E9%82%A3%E4%B9%88-encoded-2-1-%E3%80%82%E7%BB%99%E4%BD%A0-encoded-%E6%95%B0%E7%BB%84%EF%BC%8C%E8%AF%B7%E4%BD%A0%E8%BF%94%E5%9B%9E%E5%8E%9F%E5%A7%8B%E6%95%B0%E7%BB%84-perm-%E3%80%82%E9%A2%98%E7%9B%AE%E4%BF%9D%E8%AF%81%E7%AD%94%E6%A1%88%E5%AD%98%E5%9C%A8%E4%B8%94%E5%94%AF%E4%B8%80%E3%80%82\"><span class=\"toc-text\">给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] &#x3D; perm[i] XOR perm[i + 1] 。比方说，如果 perm &#x3D; [1,3,2] ，那么 encoded &#x3D; [2,1] 。给你 encoded 数组，请你返回原始数组 perm 。题目保证答案存在且唯一。</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%EF%BC%88%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%EF%BC%89\"><span class=\"toc-text\">一、解法一：通过数据解题思路（异或运算）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">1.1 思路</span></a></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"数据结构与算法-1","uid":"fa4bbc9028ee856d8c505acb6623406b","slug":"数据结构与算法-1","date":"2021-05-14T11:52:49.000Z","updated":"2021-05-22T14:28:07.840Z","comments":true,"path":"api/articles/数据结构与算法-1.json","keywords":null,"cover":"/images/banners/VCG41154059609.jpg","text":"一、数据结构 一维： 基数：数组array(String) , 链表 linked list 高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc 二维： 基础：树 tree, 图 graph 高...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":10,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":9,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":11,"path":"api/tags/Python.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}},"next_post":{"title":"TCP和UDP协议","uid":"d4cfe049c5b6be882045489e2054f761","slug":"TCP和UDP协议","date":"2021-05-10T07:43:32.000Z","updated":"2021-05-13T06:32:03.211Z","comments":true,"path":"api/articles/TCP和UDP协议.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","text":"TCP的三次握手和四次挥手 ","link":"","photos":[],"count_time":{"symbolsCount":14,"symbolsTime":"1 mins."},"categories":[{"name":"网络","slug":"网络","count":1,"path":"api/categories/网络.json"}],"tags":[{"name":"TCP","slug":"TCP","count":1,"path":"api/tags/TCP.json"},{"name":"UDP","slug":"UDP","count":1,"path":"api/tags/UDP.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
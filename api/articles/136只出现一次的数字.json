{"title":"136只出现一次的数字 LeetCode","uid":"35c279d773f512ff2cf029127b15b0e0","slug":"136只出现一次的数字","date":"2021-05-05T12:27:25.000Z","updated":"2021-05-05T13:26:48.303Z","comments":true,"path":"api/articles/136只出现一次的数字.json","keywords":null,"cover":"/images/banners/VCG211263245974.jpg","content":"<p><strong>题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</strong></p>\n<p>说明：</p>\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<p>示例 1:</p>\n<p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p>\n<p>输入: [4,1,2,1,2]<br>输出: 4</p>\n<p><strong>主要学习解法2</strong></p>\n<h2 id=\"一、解法1，使用set\"><a href=\"#一、解法1，使用set\" class=\"headerlink\" title=\"一、解法1，使用set()\"></a>一、解法1，使用set()</h2><p><strong>set()</strong> 函数创建一个<strong>无序不重复</strong>元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等</p>\n<p>代码比较简单，不做过多的解释，看看就懂。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    num_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> num_set<span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            num_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>num_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"二、解法2，使用异或运算\"><a href=\"#二、解法2，使用异或运算\" class=\"headerlink\" title=\"二、解法2，使用异或运算\"></a>二、解法2，使用异或运算</h2><p>答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。</p>\n<ol>\n<li>任何数和 0 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a</li>\n<li>任何数和其自身做异或运算，结果是 0，即 a  ⊕ a=0</li>\n</ol>\n<p>利用这个特性，可以完成如下代码，不懂的，可以去看下官方题解。比较清楚</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        re_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            re_num <span class=\"token operator\">=</span> num <span class=\"token operator\">^</span> re_num\n        <span class=\"token keyword\">return</span> re_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","feature":true,"text":"题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 示例 1: 输入: [2,2,1]输出: 1示例 2: 输入: [4,1,2,1,2]输出: 4...","link":"","photos":[],"count_time":{"symbolsCount":780,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":5,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"异或","slug":"异或","count":1,"path":"api/tags/异或.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%A7%A3%E6%B3%951%EF%BC%8C%E4%BD%BF%E7%94%A8set\"><span class=\"toc-text\">一、解法1，使用set()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%A7%A3%E6%B3%952%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">二、解法2，使用异或运算</span></a></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"237删除链表中的节点 leetCode","uid":"be827bd3744cf66f970afc1974c2f8ba","slug":"237删除链表中的节点","date":"2021-05-05T12:03:58.000Z","updated":"2021-05-05T12:10:58.428Z","comments":true,"path":"api/articles/237删除链表中的节点.json","keywords":null,"cover":"/images/banners/VCG211263245974.jpg","text":"题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。这个题一开始，我也有点懞，被这个题目弄傻了。后面看了下题解，豁然开朗。 主要思路 将下一个节点的值赋值给当前节点 然后把下一个节点删除即可（删除方法：将当前节点next指向下...","link":"","photos":[],"count_time":{"symbolsCount":398,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":5,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true}}
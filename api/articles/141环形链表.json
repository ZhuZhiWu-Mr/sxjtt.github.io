{"title":"141环形链表","uid":"b83bcf954408510a4198091631a0eef0","slug":"141环形链表","date":"2021-06-05T02:35:31.000Z","updated":"2021-06-05T02:41:01.896Z","comments":true,"path":"api/articles/141环形链表.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","content":"<h3 id=\"给定一个链表，判断链表中是否有环。\"><a href=\"#给定一个链表，判断链表中是否有环。\" class=\"headerlink\" title=\"给定一个链表，判断链表中是否有环。\"></a>给定一个链表，判断链表中是否有环。</h3><h3 id=\"如果链表中有某个节点，可以通过连续跟踪-next-指针再次到达，则链表中存在环。-为了表示给定链表中的环，我们使用整数-pos-来表示链表尾连接到链表中的位置（索引从-0-开始）。-如果-pos-是-1，则在该链表中没有环。注意：pos-不作为参数进行传递，仅仅是为了标识链表的实际情况。\"><a href=\"#如果链表中有某个节点，可以通过连续跟踪-next-指针再次到达，则链表中存在环。-为了表示给定链表中的环，我们使用整数-pos-来表示链表尾连接到链表中的位置（索引从-0-开始）。-如果-pos-是-1，则在该链表中没有环。注意：pos-不作为参数进行传递，仅仅是为了标识链表的实际情况。\" class=\"headerlink\" title=\"如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\"></a>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</h3><h3 id=\"如果链表中存在环，则返回-true-。-否则，返回-false-。\"><a href=\"#如果链表中存在环，则返回-true-。-否则，返回-false-。\" class=\"headerlink\" title=\"如果链表中存在环，则返回 true 。 否则，返回 false 。\"></a>如果链表中存在环，则返回 true 。 否则，返回 false 。</h3><h4 id=\"解法1：hash\"><a href=\"#解法1：hash\" class=\"headerlink\" title=\"解法1：hash\"></a>解法1：hash</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># hash </span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        node_hash <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> head <span class=\"token keyword\">in</span> node_hash<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            node_hash<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"解法2：快慢指针\"><a href=\"#解法2：快慢指针\" class=\"headerlink\" title=\"解法2：快慢指针\"></a>解法2：快慢指针</h4><p>定义两个指针，一个一次走一步，一个一次跑两步，如果有环，就会存在套圈；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 快慢指针</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        slow <span class=\"token operator\">=</span> head\t<span class=\"token comment\"># 慢指针</span>\n        fast <span class=\"token operator\">=</span> head\t<span class=\"token comment\"># 快指针</span>\n        <span class=\"token keyword\">while</span> fast <span class=\"token keyword\">and</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"给定一个链表，判断链表中是否有环。如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为...","link":"","photos":[],"count_time":{"symbolsCount":815,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":13,"path":"api/tags/Python.json"},{"name":"链表","slug":"链表","count":2,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%EF%BC%8C%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%E3%80%82\"><span class=\"toc-text\">给定一个链表，判断链表中是否有环。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%9C%89%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%BF%9E%E7%BB%AD%E8%B7%9F%E8%B8%AA-next-%E6%8C%87%E9%92%88%E5%86%8D%E6%AC%A1%E5%88%B0%E8%BE%BE%EF%BC%8C%E5%88%99%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%8E%AF%E3%80%82-%E4%B8%BA%E4%BA%86%E8%A1%A8%E7%A4%BA%E7%BB%99%E5%AE%9A%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%8E%AF%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%E6%95%B4%E6%95%B0-pos-%E6%9D%A5%E8%A1%A8%E7%A4%BA%E9%93%BE%E8%A1%A8%E5%B0%BE%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%88%E7%B4%A2%E5%BC%95%E4%BB%8E-0-%E5%BC%80%E5%A7%8B%EF%BC%89%E3%80%82-%E5%A6%82%E6%9E%9C-pos-%E6%98%AF-1%EF%BC%8C%E5%88%99%E5%9C%A8%E8%AF%A5%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%B2%A1%E6%9C%89%E7%8E%AF%E3%80%82%E6%B3%A8%E6%84%8F%EF%BC%9Apos-%E4%B8%8D%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E8%BF%9B%E8%A1%8C%E4%BC%A0%E9%80%92%EF%BC%8C%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%BA%E4%BA%86%E6%A0%87%E8%AF%86%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5%E3%80%82\"><span class=\"toc-text\">如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%8E%AF%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9E-true-%E3%80%82-%E5%90%A6%E5%88%99%EF%BC%8C%E8%BF%94%E5%9B%9E-false-%E3%80%82\"><span class=\"toc-text\">如果链表中存在环，则返回 true 。 否则，返回 false 。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%951%EF%BC%9Ahash\"><span class=\"toc-text\">解法1：hash</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%952%EF%BC%9A%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88\"><span class=\"toc-text\">解法2：快慢指针</span></a></li></ol></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"Python并发编程实战","uid":"c96a29bb0267b75e1f4b13b4bcd3675a","slug":"Python并发编程实战","date":"2021-06-19T12:13:33.000Z","updated":"2021-06-19T12:19:26.868Z","comments":true,"path":"api/articles/Python并发编程实战.json","keywords":null,"cover":null,"text":"Python并发编程实战一、什么是CPU密集型计算、IO密集型计算？CPU密集型（CPU-bound）: CPU密集型也叫计算密集型，是指I/O在很短的时间就可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高 例如：压缩解压缩、加密解密、正则表达式搜索； IO密集型（...","link":"","photos":[],"count_time":{"symbolsCount":232,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true},"next_post":{"title":"环形链表","uid":"cde93a18c0de17e2e416f86b2d16ec3e","slug":"环形链表","date":"2021-06-05T02:35:19.000Z","updated":"2021-06-05T02:35:19.061Z","comments":true,"path":"api/articles/环形链表.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
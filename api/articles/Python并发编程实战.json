{"title":"Python并发编程实战","uid":"c96a29bb0267b75e1f4b13b4bcd3675a","slug":"Python并发编程实战","date":"2021-06-19T12:13:33.000Z","updated":"2021-08-10T06:36:27.034Z","comments":true,"path":"api/articles/Python并发编程实战.json","keywords":null,"cover":"/images/banners/VCG211298022765.jpg","content":"<h2 id=\"Python并发编程实战\"><a href=\"#Python并发编程实战\" class=\"headerlink\" title=\"Python并发编程实战\"></a>Python并发编程实战</h2><h3 id=\"一、什么是CPU密集型计算、IO密集型计算？\"><a href=\"#一、什么是CPU密集型计算、IO密集型计算？\" class=\"headerlink\" title=\"一、什么是CPU密集型计算、IO密集型计算？\"></a>一、什么是CPU密集型计算、IO密集型计算？</h3><p><strong>CPU密集型（CPU-bound）:</strong></p>\n<p>CPU密集型也叫计算密集型，是指I/O在很短的时间就可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高</p>\n<p>例如：压缩解压缩、加密解密、正则表达式搜索；</p>\n<p><strong>IO密集型（I/O bound）:</strong></p>\n<p>IO密集型指的是系统动作大部分的状况是CPU在等I/O（硬盘/内存）的读/写操作，CPU占用率仍然较低。</p>\n<p>例如：文件处理程序、网络爬虫程序、读写数据库程序 ；</p>\n","text":"Python并发编程实战一、什么是CPU密集型计算、IO密集型计算？CPU密集型（CPU-bound）: CPU密集型也叫计算密集型，是指I/O在很短的时间就可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高 例如：压缩解压缩、加密解密、正则表达式搜索； IO密集型（...","link":"","photos":[],"count_time":{"symbolsCount":232,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Python%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">Python并发编程实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFCPU%E5%AF%86%E9%9B%86%E5%9E%8B%E8%AE%A1%E7%AE%97%E3%80%81IO%E5%AF%86%E9%9B%86%E5%9E%8B%E8%AE%A1%E7%AE%97%EF%BC%9F\"><span class=\"toc-text\">一、什么是CPU密集型计算、IO密集型计算？</span></a></li></ol></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"Python多进程与多线程","uid":"b2c2bb855d265e670ce1f297fc82a024","slug":"Python多进程与多线程","date":"2021-06-24T04:40:25.000Z","updated":"2021-08-10T06:32:51.274Z","comments":true,"path":"api/articles/Python多进程与多线程.json","keywords":null,"cover":"/images/banners/VCG211298928592.jpg","text":"一、多进程1.1 进程的创建步骤 导入进程包 import multiprocessing 通过进程类创建进程对象 进程对象 = multiprocessing.Process() 启动进程执行任务 进程对象.start() 1.2 通过进程类创建进程对象进程对象 = multi...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true},"next_post":{"title":"141环形链表","uid":"b83bcf954408510a4198091631a0eef0","slug":"141环形链表","date":"2021-06-05T02:35:31.000Z","updated":"2021-06-05T02:41:01.896Z","comments":true,"path":"api/articles/141环形链表.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","text":"给定一个链表，判断链表中是否有环。如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为...","link":"","photos":[],"count_time":{"symbolsCount":815,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":15,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":15,"path":"api/tags/Python.json"},{"name":"链表","slug":"链表","count":2,"path":"api/tags/链表.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
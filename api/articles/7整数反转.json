{"title":"7整数反转","uid":"a6a6e608463003ddb5663eae5ed8be17","slug":"7整数反转","date":"2021-05-03T16:27:50.000Z","updated":"2021-05-04T13:23:45.839Z","comments":true,"path":"api/articles/7整数反转.json","keywords":null,"cover":"/images/banners/VCG211263245974.jpg","content":"<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>\n<h2 id=\"1、解法1，未优化写法-40ms\"><a href=\"#1、解法1，未优化写法-40ms\" class=\"headerlink\" title=\"1、解法1，未优化写法   40ms\"></a>1、解法1，未优化写法   40ms</h2><h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>   （1）这个题挺简单，就是通过%运算，每次都取到数的最后一位<br>   （2）考虑到负数的问题，所以while那里使用了 x!=0，因为按这种方式计算，最后都会为0<br>   （3）注意题目规定的整数范围，这里代码做了提前一位的判断。看下图解</p>\n<p>   <img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504005805249.png\"></p>\n<p>   第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>   所以，我们到【最大数的1/10】时，就要开始判断了<br>   如果某个数字<strong>大于</strong> 214748364那后面就不用再判断了，肯定溢出了。<br>   如果某个数字<strong>等于</strong> 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的<strong>末尾数字</strong>比较，如果这个数字比<strong>7</strong>还大，说明溢出了。</p>\n<p><strong>负数也是一样：</strong></p>\n<p><img src=\"/post/7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/image-20210504010425266.png\"></p>\n<p>上图中绿色部分是最小的32位整数，同样是在【最小数的 1/10】时开始判断<br>如果某个数字<strong>小于</strong> -214748364说明溢出了<br>如果某个数字<strong>等于</strong> -214748364，还需要跟最小数的<strong>末尾比较</strong>，即看它是否<strong>小于8</strong></p>\n<h3 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h3><pre><code>因为Python 的%运算，是使用的floor的方式，在计算负数的时候，会出现和Java不同，所以，都转成正数来取模运算\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        reverse_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n                tmp_num <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>tmp_num\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                tmp_num <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>reverse_num <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            reverse_num <span class=\"token operator\">=</span> reverse_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> reverse_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2、-将解法1所写的代码进行优化-32ms\"><a href=\"#2、-将解法1所写的代码进行优化-32ms\" class=\"headerlink\" title=\"2、 将解法1所写的代码进行优化   32ms\"></a>2、 将解法1所写的代码进行优化   32ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 2147483647</span>\n        <span class=\"token comment\"># -2147483648</span>\n        y<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp_num <span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            <span class=\"token comment\"># 判断是否溢出</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">214748364</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">></span> <span class=\"token number\">214748364</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">==</span> <span class=\"token number\">214748364</span> <span class=\"token keyword\">and</span> tmp_num <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp_num\n            y <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span>res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3、使用字符串反转的方法-36ms\"><a href=\"#3、使用字符串反转的方法-36ms\" class=\"headerlink\" title=\"3、使用字符串反转的方法  36ms\"></a>3、使用字符串反转的方法  36ms</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        y <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        ins <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n            ins <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> nums <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span> <span class=\"token keyword\">or</span> nums <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>ins <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"题目总结：\"><a href=\"#题目总结：\" class=\"headerlink\" title=\"题目总结：\"></a>题目总结：</h3><pre><code>在用字符串反转的方法时，我发现Ptyhon这样将字符串进行转换，整型不会内存溢出，很好奇的我，去网上查阅了资料，发现Python3之后，都是统一使用了长整型\n</code></pre>\n<p>现在是2021年5月4号零晨1:45分，这是我刷leetcode的第三道题，每次将自己写的一串很长的代码，优化成很简单，看着自己的代码运行时间越写越短，内心有一点无比自豪的感觉，很喜欢这种超越自己的，继续加油吧。哈哈哈哈哈哈</p>\n","feature":true,"text":"给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号） 1、解法1，未优化写法 40ms思路： （1）这个题挺简单...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":3,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%A7%A3%E6%B3%951%EF%BC%8C%E6%9C%AA%E4%BC%98%E5%8C%96%E5%86%99%E6%B3%95-40ms\"><span class=\"toc-text\">1、解法1，未优化写法   40ms</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%EF%BC%9A\"><span class=\"toc-text\">思路：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">遇到问题：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81-%E5%B0%86%E8%A7%A3%E6%B3%951%E6%89%80%E5%86%99%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96-32ms\"><span class=\"toc-text\">2、 将解法1所写的代码进行优化   32ms</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC%E7%9A%84%E6%96%B9%E6%B3%95-36ms\"><span class=\"toc-text\">3、使用字符串反转的方法  36ms</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">题目总结：</span></a></li></ol></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"shell脚本","uid":"9a2252c0b559cb77f268bff5416cc06f","slug":"shell脚本","date":"2021-05-04T11:55:39.000Z","updated":"2021-05-04T13:26:09.662Z","comments":true,"path":"api/articles/shell脚本.json","keywords":null,"cover":"/images/banners/VCG41N1169192820.jpg","text":"清屏clear 输出换行，两个echo -e &quot;\\n\\n&quot; 休息一秒sleep 1 输出用户数who | awk &#39;&#123;print $1&#125;&#39; | sort | uniq | wc -l 让计算机发出蜂鸣声echo -en &q...","link":"","photos":[],"count_time":{"symbolsCount":663,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"},{"name":"Sehll","slug":"Linux/Sehll","count":1,"path":"api/categories/Linux/Sehll.json"}],"tags":[{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}},"next_post":{"title":"两数之和 leetcode 1","uid":"250c409a50fd09c16cdaf2126a453a8d","slug":"两数之和","date":"2021-05-03T11:55:20.000Z","updated":"2021-05-04T13:24:25.806Z","comments":true,"path":"api/articles/两数之和.json","keywords":null,"cover":"/images/banners/VCG41154059609.jpg","text":"题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案 示例 1： 输入：nums = [2...","link":"","photos":[],"count_time":{"symbolsCount":691,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":3,"path":"api/tags/Python.json"},{"name":"Hash","slug":"Hash","count":2,"path":"api/tags/Hash.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
{"title":"Python多进程与多线程","uid":"b2c2bb855d265e670ce1f297fc82a024","slug":"Python多进程与多线程","date":"2021-06-24T04:40:25.000Z","updated":"2021-08-10T06:32:51.274Z","comments":true,"path":"api/articles/Python多进程与多线程.json","keywords":null,"cover":"/images/banners/VCG211298928592.jpg","content":"<h2 id=\"一、多进程\"><a href=\"#一、多进程\" class=\"headerlink\" title=\"一、多进程\"></a>一、多进程</h2><h3 id=\"1-1-进程的创建步骤\"><a href=\"#1-1-进程的创建步骤\" class=\"headerlink\" title=\"1.1 进程的创建步骤\"></a>1.1 进程的创建步骤</h3><ul>\n<li><p>导入进程包</p>\n<p>  import multiprocessing</p>\n</li>\n<li><p>通过进程类创建进程对象<br>  进程对象 = multiprocessing.Process()</p>\n</li>\n<li><p>启动进程执行任务<br>  进程对象.start()</p>\n</li>\n</ul>\n<h3 id=\"1-2-通过进程类创建进程对象\"><a href=\"#1-2-通过进程类创建进程对象\" class=\"headerlink\" title=\"1.2 通过进程类创建进程对象\"></a>1.2 通过进程类创建进程对象</h3><p>进程对象 = multiprocessing.Process(target=任务名)</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>target</td>\n<td>执行的目标任务名，这里指的是函数名（方法名）</td>\n</tr>\n<tr>\n<td>name</td>\n<td>进程名，一般不用设置</td>\n</tr>\n<tr>\n<td>group</td>\n<td>进程组，目前只能使用None</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-3-进程创建与启动的代码\"><a href=\"#1-3-进程创建与启动的代码\" class=\"headerlink\" title=\"1.3 进程创建与启动的代码\"></a>1.3 进程创建与启动的代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11111'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'22222'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    sing_process1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>print1<span class=\"token punctuation\">)</span>\n    sing_process2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>print2<span class=\"token punctuation\">)</span>\n    sing_process1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sing_process2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-4-进程执行带有参数的任务\"><a href=\"#1-4-进程执行带有参数的任务\" class=\"headerlink\" title=\"1.4 进程执行带有参数的任务\"></a>1.4 进程执行带有参数的任务</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>args</td>\n<td>以元组的方式给执行任务传参</td>\n</tr>\n<tr>\n<td>kwargs</td>\n<td>以字典方式给执行任务传参</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-5-args参数的使用\"><a href=\"#1-5-args参数的使用\" class=\"headerlink\" title=\"1.5 args参数的使用\"></a>1.5 args参数的使用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># target: 进程执行的函数名</span>\n    <span class=\"token comment\"># args: 表示以元组的方式给函数传参</span>\n    sing_process1 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>print1<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈哈\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sing_process1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-6-kwargs参数的使用\"><a href=\"#1-6-kwargs参数的使用\" class=\"headerlink\" title=\"1.6 kwargs参数的使用\"></a>1.6 kwargs参数的使用</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># target: 进程执行的函数名</span>\n    <span class=\"token comment\"># args: 表示以元组的方式给函数传参</span>\n    sing_process2 <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>print2<span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"我是进程2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    sing_process2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1-7、获取进程编号\"><a href=\"#1-7、获取进程编号\" class=\"headerlink\" title=\"1.7、获取进程编号\"></a>1.7、获取进程编号</h3><p><strong>进程编号的作用</strong><br>当程序中进程的数量越来越多时，如果没有办法区分主进程和子进程还有不同的子进程，那么就无法进行有效的进程管理，为了方便管理实际上每个进程都是有自己编号的。<br><strong>获取当前进程的编号和父进程的编号：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 当前进程的编号（os.getpid()）</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1-id:\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 父进程的编号 （os.getppid()）</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1-pppp\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-8-、进程的注意点主进程默认会等待所有的子进程执行结束再结束\"><a href=\"#1-8-、进程的注意点主进程默认会等待所有的子进程执行结束再结束\" class=\"headerlink\" title=\"1.8 、进程的注意点主进程默认会等待所有的子进程执行结束再结束\"></a>1.8 、进程的注意点主进程默认会等待所有的子进程执行结束再结束</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-202106241321.png\" alt=\"image-20210624135941184\"></p>\n<p><strong>想要主进程结束，子进程也跟着结束，需要设置守护主进程</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子进程正在工作中\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    m_work <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>work<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 设置守护</span>\n    m_work<span class=\"token punctuation\">.</span>daemon <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    m_work<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主进程结束了\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-9、多进程实现文件夹多任务白拷贝器\"><a href=\"#1-9、多进程实现文件夹多任务白拷贝器\" class=\"headerlink\" title=\"1.9、多进程实现文件夹多任务白拷贝器\"></a>1.9、多进程实现文件夹多任务白拷贝器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copy_file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source_path<span class=\"token punctuation\">,</span> target_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>source_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> source_file<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>target_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> target_source_file<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> data <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> source_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        target_source_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">break</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start_t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    source <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\data\\\\【51优质资源 www.51data.org】算法训练营\\\\第0课\"</span>\n    target_source <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\算法训练营\"</span>\n    source_list <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>source_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>target_source<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹已经存在\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> source_list<span class=\"token punctuation\">:</span>\n        m <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>copy_file<span class=\"token punctuation\">(</span>source <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">,</span> target_source <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        m<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    end_t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>end_t <span class=\"token operator\">-</span> start_t<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二、多线程\"><a href=\"#二、多线程\" class=\"headerlink\" title=\"二、多线程\"></a>二、多线程</h2><p><strong>线程介绍 ：</strong></p>\n<ul>\n<li>多线程是Python程序中<strong>实现多任务</strong>的一种方式。</li>\n<li>线程是<strong>程序执行的最小单位</strong>。</li>\n<li>同属一个进程的多个线程**共享进程所拥有的全部资源 **</li>\n</ul>\n<h3 id=\"2-1-实现多任务的另一种形式\"><a href=\"#2-1-实现多任务的另一种形式\" class=\"headerlink\" title=\"2.1 实现多任务的另一种形式\"></a>2.1 实现多任务的另一种形式</h3><p>在Python中，想要实现多任务还可以使用多线程来完成</p>\n<h3 id=\"2-2-为什么使用多线程？\"><a href=\"#2-2-为什么使用多线程？\" class=\"headerlink\" title=\"2.2 为什么使用多线程？\"></a>2.2 为什么使用多线程？</h3><p>进程是分配资源的最小单位，一旦创建一个进程就会分配一定的资源，就像跟两个人聊QQ就需要打开两个QQ软件一样是比较浪费资源的。</p>\n<p>线程是<strong>程序执行的最小单位</strong>，实际上进程只负责分配资源，而利用这些资源执行程序的线程，也就说进程是线程的窗口，一个进程中最少有一个线程来负责执行程序，同时线程自己不拥有系统资源，只需要一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程<strong>共享进程所拥有的全部资源</strong>，这就像通过一个QQ软件（一个进程）打开两个窗口（两个线程）跟两个人聊天一样，实现多任务的同时也节省了资源。</p>\n<h3 id=\"2-3-线程的创建步骤\"><a href=\"#2-3-线程的创建步骤\" class=\"headerlink\" title=\"2.3 线程的创建步骤\"></a>2.3 线程的创建步骤</h3><p>2.3.1 导入线程模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.3.2 通过线程类创建线程对象</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">线程对象 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>任务名<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.3.3 启动线程执行任务</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">线程对象<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-4-通过线程类创建线程对象\"><a href=\"#2-4-通过线程类创建线程对象\" class=\"headerlink\" title=\"2.4 通过线程类创建线程对象\"></a>2.4 通过线程类创建线程对象</h3><p>线程对象=threading.Thread(target=任务名)</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>target</td>\n<td>执行的目标任务名，这里指的是函数名（方法名）</td>\n</tr>\n<tr>\n<td>name</td>\n<td>线程名，一般不用设置</td>\n</tr>\n<tr>\n<td>group</td>\n<td>线程组，目前只使用None</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳舞\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唱歌\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">)</span>\n    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>sing<span class=\"token punctuation\">)</span>\n    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-5-线程执行带有参数的任务\"><a href=\"#2-5-线程执行带有参数的任务\" class=\"headerlink\" title=\"2.5 线程执行带有参数的任务\"></a>2.5 线程执行带有参数的任务</h3><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>args</td>\n<td>以元组的方式给执行任务传参</td>\n</tr>\n<tr>\n<td>kwargs</td>\n<td>以字典方式给执行任务传参</td>\n</tr>\n</tbody></table>\n<p><strong>1、args的使用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳舞\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># target:线程执行的函数名</span>\n    <span class=\"token comment\"># args:表示以无组的方式给函数传参，逗号不能丢</span>\n    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2、kwargs的使用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跳舞\"</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># target:线程执行的函数名</span>\n    <span class=\"token comment\"># kwargs:表示以字典的方式给函数传参</span>\n    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>dance<span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-6、主线程和子线程的结束顺序\"><a href=\"#2-6、主线程和子线程的结束顺序\" class=\"headerlink\" title=\"2.6、主线程和子线程的结束顺序\"></a>2.6、主线程和子线程的结束顺序</h3><ul>\n<li>主线程默认会等待所有子线程执行结束之后再结束 ，除非设置子线程守护主线程</li>\n<li>设置守护主线程有两种方式：<ul>\n<li>threading.Thread(target=work, daemon=True)</li>\n<li>线程对象.setDaemon(True)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-7、线程间的执行顺序\"><a href=\"#2-7、线程间的执行顺序\" class=\"headerlink\" title=\"2.7、线程间的执行顺序\"></a>2.7、线程间的执行顺序</h3><p><strong>线程之间执行是无序的，是由CPU调度决定某个线程先执行的</strong></p>\n<h3 id=\"2-8、多线程实现文件夹多任务白拷贝器\"><a href=\"#2-8、多线程实现文件夹多任务白拷贝器\" class=\"headerlink\" title=\"2.8、多线程实现文件夹多任务白拷贝器\"></a>2.8、多线程实现文件夹多任务白拷贝器</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> multiprocessing\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">copy_file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source_path<span class=\"token punctuation\">,</span> target_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>source_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> source_file<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>target_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> target_source_file<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> data <span class=\"token punctuation\">:</span><span class=\"token operator\">=</span> source_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        target_source_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">break</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start_t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    source <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\data\\\\【51优质资源 www.51data.org】算法训练营\\\\第0课\"</span>\n    target_source <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\算法训练营\"</span>\n    source_list <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>source_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>target_source<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件夹已经存在\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> source_list<span class=\"token punctuation\">:</span>\n        m <span class=\"token operator\">=</span> multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span>Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>copy_file<span class=\"token punctuation\">(</span>source <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">,</span> target_source <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\\\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        m<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    end_t <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>end_t <span class=\"token operator\">-</span> start_t<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、进程和线程对比\"><a href=\"#三、进程和线程对比\" class=\"headerlink\" title=\"三、进程和线程对比\"></a>三、进程和线程对比</h2><h3 id=\"3-1、关系对比\"><a href=\"#3-1、关系对比\" class=\"headerlink\" title=\"3.1、关系对比\"></a>3.1、关系对比</h3><p>（1）线程是依附在进程里面的，没有进程就没有线程。</p>\n<p>（2）一个进程默认提供一条线程，进程可以创建多个线程。</p>\n<h3 id=\"3-2、区别对比\"><a href=\"#3-2、区别对比\" class=\"headerlink\" title=\"3.2、区别对比\"></a>3.2、区别对比</h3><ol>\n<li>创建进程的资源开销要比创建线程的资源开销要大</li>\n<li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li>\n<li>线程不能够独立执行，必须依存在进程中</li>\n</ol>\n<h3 id=\"3-3、优缺点对比\"><a href=\"#3-3、优缺点对比\" class=\"headerlink\" title=\"3.3、优缺点对比\"></a>3.3、优缺点对比</h3><ol>\n<li><p>进程优缺点：</p>\n<ul>\n<li>优点：可以用多核</li>\n<li>缺点：资源开销大</li>\n</ul>\n</li>\n<li><p>线程优缺点：</p>\n<ul>\n<li>优点：资源开销小</li>\n<li>缺点：不能使用多核</li>\n</ul>\n</li>\n</ol>\n","feature":true,"text":"一、多进程1.1 进程的创建步骤 导入进程包 import multiprocessing 通过进程类创建进程对象 进程对象 = multiprocessing.Process() 启动进程执行任务 进程对象.start() 1.2 通过进程类创建进程对象进程对象 = multi...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">一、多进程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">1.1 进程的创建步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E9%80%9A%E8%BF%87%E8%BF%9B%E7%A8%8B%E7%B1%BB%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.2 通过进程类创建进程对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%90%AF%E5%8A%A8%E7%9A%84%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">1.3 进程创建与启动的代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%B8%A6%E6%9C%89%E5%8F%82%E6%95%B0%E7%9A%84%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">1.4 进程执行带有参数的任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-args%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.5 args参数的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-6-kwargs%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.6 kwargs参数的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7%E3%80%81%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8B%E7%BC%96%E5%8F%B7\"><span class=\"toc-text\">1.7、获取进程编号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-8-%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9%E4%B8%BB%E8%BF%9B%E7%A8%8B%E9%BB%98%E8%AE%A4%E4%BC%9A%E7%AD%89%E5%BE%85%E6%89%80%E6%9C%89%E7%9A%84%E5%AD%90%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F%E5%86%8D%E7%BB%93%E6%9D%9F\"><span class=\"toc-text\">1.8 、进程的注意点主进程默认会等待所有的子进程执行结束再结束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-9%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%99%BD%E6%8B%B7%E8%B4%9D%E5%99%A8\"><span class=\"toc-text\">1.9、多进程实现文件夹多任务白拷贝器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">二、多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">2.1 实现多任务的另一种形式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">2.2 为什么使用多线程？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">2.3 线程的创建步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E9%80%9A%E8%BF%87%E7%BA%BF%E7%A8%8B%E7%B1%BB%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.4 通过线程类创建线程对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%B8%A6%E6%9C%89%E5%8F%82%E6%95%B0%E7%9A%84%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">2.5 线程执行带有参数的任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6%E3%80%81%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%AD%90%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%BB%93%E6%9D%9F%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">2.6、主线程和子线程的结束顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7%E3%80%81%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">2.7、线程间的执行顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%99%BD%E6%8B%B7%E8%B4%9D%E5%99%A8\"><span class=\"toc-text\">2.8、多线程实现文件夹多任务白拷贝器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">三、进程和线程对比</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E5%85%B3%E7%B3%BB%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">3.1、关系对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E5%8C%BA%E5%88%AB%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">3.2、区别对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3%E3%80%81%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">3.3、优缺点对比</span></a></li></ol></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"蒙特卡洛树搜索MCTS","uid":"e4486b46c423239be00f208745edcc94","slug":"蒙特卡洛树搜索","date":"2021-08-03T02:56:38.000Z","updated":"2021-08-03T03:35:57.812Z","comments":true,"path":"api/articles/蒙特卡洛树搜索.json","keywords":null,"cover":"/images/banners/VCG41N1070447322.jpg","text":"1、蒙特卡洛树搜索（The Monte Carlo Tree Search） 蒙特卡罗树搜索是一类树搜索算法的统称，简称MCTS。它是一种用于某些决策过程的启发搜索算法，且在搜索空间巨大的游戏中会比较有效。 从全局来看，蒙特卡洛树搜索的主要目标是：给定一个游戏状态来选择最佳的下一...","link":"","photos":[],"count_time":{"symbolsCount":529,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":15,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":15,"path":"api/tags/Python.json"},{"name":"MCTS","slug":"MCTS","count":1,"path":"api/tags/MCTS.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true},"next_post":{"title":"Python并发编程实战","uid":"c96a29bb0267b75e1f4b13b4bcd3675a","slug":"Python并发编程实战","date":"2021-06-19T12:13:33.000Z","updated":"2021-08-10T06:36:27.034Z","comments":true,"path":"api/articles/Python并发编程实战.json","keywords":null,"cover":"/images/banners/VCG211298022765.jpg","text":"Python并发编程实战一、什么是CPU密集型计算、IO密集型计算？CPU密集型（CPU-bound）: CPU密集型也叫计算密集型，是指I/O在很短的时间就可以完成，CPU需要大量的计算和处理，特点是CPU占用率相当高 例如：压缩解压缩、加密解密、正则表达式搜索； IO密集型（...","link":"","photos":[],"count_time":{"symbolsCount":232,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
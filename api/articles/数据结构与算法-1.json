{"title":"数据结构与算法-1","uid":"fa4bbc9028ee856d8c505acb6623406b","slug":"数据结构与算法-1","date":"2021-05-14T11:52:49.000Z","updated":"2021-07-29T06:42:57.430Z","comments":true,"path":"api/articles/数据结构与算法-1.json","keywords":null,"cover":"/images/banners/VCG41154059609.jpg","content":"<h2 id=\"一、数据结构\"><a href=\"#一、数据结构\" class=\"headerlink\" title=\"一、数据结构\"></a>一、数据结构</h2><ul>\n<li><p>一维：</p>\n<ul>\n<li>基数：数组array(String) , 链表 linked list</li>\n<li>高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc</li>\n</ul>\n</li>\n<li><p>二维：</p>\n<ul>\n<li> 基础：树 tree, 图 graph</li>\n<li> 高级：二叉搜索树 binary search tree (red-black tree, AVL), 堆 heap, 并查集 disjoint set, 字典树 Trie , etc</li>\n</ul>\n</li>\n<li><p>特殊：</p>\n<ul>\n<li>位运算 Bitwise, 布隆过滤器 BloomFitter</li>\n<li>LRU Cache</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、算法\"><a href=\"#二、算法\" class=\"headerlink\" title=\"二、算法\"></a>二、算法</h2><ul>\n<li>if-else, swithch -&gt; branch</li>\n<li>for, while loop -&gt; lteration</li>\n<li>递归 Recursion (Divide &amp; Conquer, Backtrace)</li>\n</ul>\n<ul>\n<li>搜索Search: 尝试优先搜索 Depath first search, 广度优先搜索 Braeadth first search , A* , etc</li>\n<li>动态规划 Dynamic Programming</li>\n<li>二分查找 Binary Search</li>\n<li>贪心 Greedy</li>\n<li>数据 Math, 几何 Geometry</li>\n<li><em>注意在头脑中回忆上面每种算法的思想和代码模块</em>*</li>\n</ul>\n<h3 id=\"2-1-算法结构脑图\"><a href=\"#2-1-算法结构脑图\" class=\"headerlink\" title=\"2.1 算法结构脑图\"></a>2.1 算法结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201311899.png\" alt=\"image-20210514201311899\"></p>\n<h3 id=\"2-2-数据结构脑图\"><a href=\"#2-2-数据结构脑图\" class=\"headerlink\" title=\"2.2 数据结构脑图\"></a>2.2 数据结构脑图</h3><p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210514201558920.png\" alt=\"image-20210514201558920\"></p>\n<h2 id=\"三、切题四件套\"><a href=\"#三、切题四件套\" class=\"headerlink\" title=\"三、切题四件套\"></a>三、切题四件套</h2><ul>\n<li>Clarification</li>\n<li>Possible solutions<ul>\n<li>compare(time/space)</li>\n<li>optimal（加强）</li>\n</ul>\n</li>\n<li>Coding (多写)</li>\n<li>Test cases</li>\n</ul>\n<h3 id=\"3-1-刷题第一遍\"><a href=\"#3-1-刷题第一遍\" class=\"headerlink\" title=\"3.1 刷题第一遍\"></a>3.1 刷题第一遍</h3><ul>\n<li>5分钟：读题+思考 </li>\n<li>直接看解法：注意！多解法，比较解法优劣</li>\n<li>背诵、默写好的解法</li>\n</ul>\n<h3 id=\"3-2-刷题第二遍\"><a href=\"#3-2-刷题第二遍\" class=\"headerlink\" title=\"3.2 刷题第二遍\"></a>3.2 刷题第二遍</h3><ul>\n<li>马上自己写 –》LeetCode提交</li>\n<li>多种解法比较、体会 –》优化！</li>\n</ul>\n<h2 id=\"四、时间复杂度\"><a href=\"#四、时间复杂度\" class=\"headerlink\" title=\"四、时间复杂度\"></a>四、时间复杂度</h2><ul>\n<li>二叉树遍历- 前序、中序、后序： 时间复杂度是多少？  O(n)</li>\n<li>图的遍历 ： 时间复杂度是多少? O(n)</li>\n<li>搜索算法： DFS、BFS时间复杂度是多少？ O(n)</li>\n<li>二分查找：时间复杂度是多少？ Logn</li>\n</ul>\n<h2 id=\"五、数组、链表、跳表\"><a href=\"#五、数组、链表、跳表\" class=\"headerlink\" title=\"五、数组、链表、跳表\"></a>五、数组、链表、跳表</h2><h3 id=\"5-1-链表时间复杂度\"><a href=\"#5-1-链表时间复杂度\" class=\"headerlink\" title=\"5.1 链表时间复杂度\"></a>5.1 链表时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(n)</li>\n<li>insert    O(1)</li>\n<li>delete    O(1)<h4 id=\"5-1-1-如何给链表加速\"><a href=\"#5-1-1-如何给链表加速\" class=\"headerlink\" title=\"5.1.1 如何给链表加速\"></a>5.1.1 如何给链表加速</h4></li>\n</ul>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082344998.png\" alt=\"image-20210515082344998\"></p>\n<h3 id=\"5-2-跳表\"><a href=\"#5-2-跳表\" class=\"headerlink\" title=\"5.2 跳表\"></a>5.2 跳表</h3><ol>\n<li><p>时间复杂度：O(logn)</p>\n</li>\n<li><p>空间复杂度：O(n)</p>\n</li>\n<li><p>索引的高度：logn, 每层索引遍历的结点个数：3</p>\n</li>\n<li><p>在跳表中查询任意数据的时间复杂度就是O(logn)<br><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083752655.png\" alt=\"image-20210515083752655\"></p>\n</li>\n</ol>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515082847958.png\" alt=\"image-20210515082847958\"></p>\n<p><img src=\"D:\\data\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210515083455591.png\" alt=\"image-20210515083455591\"></p>\n<h3 id=\"5-3-List-时间复杂度\"><a href=\"#5-3-List-时间复杂度\" class=\"headerlink\" title=\"5.3 List 时间复杂度\"></a>5.3 List 时间复杂度</h3><ul>\n<li>prepend    O(1)</li>\n<li>append    O(1)</li>\n<li>lookup    O(1)</li>\n<li>insert    O(n)</li>\n<li>delete    O(n)</li>\n</ul>\n<h3 id=\"5-4-小结\"><a href=\"#5-4-小结\" class=\"headerlink\" title=\"5.4 小结\"></a>5.4 小结</h3><ul>\n<li>数组、链表、跳表的原理和实现</li>\n<li>三者的时间复杂度、空间复杂度</li>\n<li>工程运用</li>\n<li>跳表：升维思想+空间换时间</li>\n</ul>\n<h2 id=\"六、栈和队列\"><a href=\"#六、栈和队列\" class=\"headerlink\" title=\"六、栈和队列\"></a>六、栈和队列</h2><h3 id=\"6-1-栈（Stack）和队列-Queue-的关键点：\"><a href=\"#6-1-栈（Stack）和队列-Queue-的关键点：\" class=\"headerlink\" title=\"6.1 栈（Stack）和队列(Queue)的关键点：\"></a>6.1 栈（Stack）和队列(Queue)的关键点：</h3><ul>\n<li>Stack: 先入后出；添加、删除皆为O(1)</li>\n<li>Queue:先入后出；添加、删除皆为O(1)</li>\n<li>Deque:双端队列：两端都可以进出的Queue （Double - double ended queue）  插入和删除都是O(1)</li>\n</ul>\n<h3 id=\"6-2-优先队列Priority-Queue\"><a href=\"#6-2-优先队列Priority-Queue\" class=\"headerlink\" title=\"6.2 优先队列Priority Queue\"></a>6.2 优先队列Priority Queue</h3><ol>\n<li>插入操作:0(1)</li>\n<li>取出操作:O(logN)-按照元素的优先级取出</li>\n<li>底层具体实现的数据结构较为多样和复杂:heap、bst、treap</li>\n<li><a href=\"https://docs.python.org/zh-cn/3.9/library/heapq.html#module-heapq\">https://docs.python.org/zh-cn/3.9/library/heapq.html#module-heapq</a></li>\n</ol>\n<h2 id=\"七、哈希表、映射、集合\"><a href=\"#七、哈希表、映射、集合\" class=\"headerlink\" title=\"七、哈希表、映射、集合\"></a>七、哈希表、映射、集合</h2><h3 id=\"7-1-Hash-Table：\"><a href=\"#7-1-Hash-Table：\" class=\"headerlink\" title=\"7.1 Hash Table：\"></a>7.1 Hash Table：</h3><p>哈希表（Hash table），也叫散列表，是根据关键码值（Key value）而直接进行访问的数据结构。<br>它通过把关键码值映射到表中一个位置来访问记录，以加快查找速度。<br>这个映射函数叫作散列函数（Hash Function）, 存放记录的数组叫作哈希表（或散列表）</p>\n<h3 id=\"7-2-Hash-Function：\"><a href=\"#7-2-Hash-Function：\" class=\"headerlink\" title=\"7.2 Hash Function：\"></a>7.2 Hash Function：</h3><p><img src=\"D:\\zhuzhiwu\\Develop\\WorkSpace\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210729143931244.png\" alt=\"image-20210729143931244\"></p>\n<h3 id=\"7-3-Hash-Collisions-碰撞-：\"><a href=\"#7-3-Hash-Collisions-碰撞-：\" class=\"headerlink\" title=\"7.3 Hash Collisions(碰撞)：\"></a>7.3 Hash Collisions(碰撞)：</h3><p><img src=\"D:\\zhuzhiwu\\Develop\\WorkSpace\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210729144039688.png\" alt=\"image-20210729144039688\"></p>\n<h3 id=\"7-4-完整结构：\"><a href=\"#7-4-完整结构：\" class=\"headerlink\" title=\"7.4 完整结构：\"></a>7.4 完整结构：</h3><p><img src=\"D:\\zhuzhiwu\\Develop\\WorkSpace\\projects\\gitPro\\ZhuBlogHexo\\source\\images\\questions\\image-20210729144230248.png\" alt=\"image-20210729144230248\"></p>\n","text":"一、数据结构 一维： 基数：数组array(String) , 链表 linked list 高级：栈 stack, 队列 queue , 双端队列 deque, 集合 set , 映射 map(hash or map), etc 二维： 基础：树 tree, 图 graph 高...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":13,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">一、数据结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">二、算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84%E8%84%91%E5%9B%BE\"><span class=\"toc-text\">2.1 算法结构脑图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%84%91%E5%9B%BE\"><span class=\"toc-text\">2.2 数据结构脑图</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%88%87%E9%A2%98%E5%9B%9B%E4%BB%B6%E5%A5%97\"><span class=\"toc-text\">三、切题四件套</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%88%B7%E9%A2%98%E7%AC%AC%E4%B8%80%E9%81%8D\"><span class=\"toc-text\">3.1 刷题第一遍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%88%B7%E9%A2%98%E7%AC%AC%E4%BA%8C%E9%81%8D\"><span class=\"toc-text\">3.2 刷题第二遍</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">四、时间复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E9%93%BE%E8%A1%A8%E3%80%81%E8%B7%B3%E8%A1%A8\"><span class=\"toc-text\">五、数组、链表、跳表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E9%93%BE%E8%A1%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">5.1 链表时间复杂度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-1-%E5%A6%82%E4%BD%95%E7%BB%99%E9%93%BE%E8%A1%A8%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">5.1.1 如何给链表加速</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%B7%B3%E8%A1%A8\"><span class=\"toc-text\">5.2 跳表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-List-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">5.3 List 时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">5.4 小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97\"><span class=\"toc-text\">六、栈和队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E6%A0%88%EF%BC%88Stack%EF%BC%89%E5%92%8C%E9%98%9F%E5%88%97-Queue-%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">6.1 栈（Stack）和队列(Queue)的关键点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97Priority-Queue\"><span class=\"toc-text\">6.2 优先队列Priority Queue</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8%E3%80%81%E6%98%A0%E5%B0%84%E3%80%81%E9%9B%86%E5%90%88\"><span class=\"toc-text\">七、哈希表、映射、集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-Hash-Table%EF%BC%9A\"><span class=\"toc-text\">7.1 Hash Table：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-Hash-Function%EF%BC%9A\"><span class=\"toc-text\">7.2 Hash Function：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-Hash-Collisions-%E7%A2%B0%E6%92%9E-%EF%BC%9A\"><span class=\"toc-text\">7.3 Hash Collisions(碰撞)：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E5%AE%8C%E6%95%B4%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">7.4 完整结构：</span></a></li></ol></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"70爬楼梯","uid":"d01fb00841d955d4f1e65e30fbb4f017","slug":"70爬楼梯","date":"2021-05-17T11:22:16.000Z","updated":"2021-05-31T06:07:52.756Z","comments":true,"path":"api/articles/70爬楼梯.json","keywords":null,"cover":"/images/banners/VCG211263245974.jpg","text":"假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 示例 1： 输入： 2输出： 2解释： 有两种方法可以爬到楼顶。 1 阶 + 1 阶 2 阶 示例 2： 输入： 3输出： 3解...","link":"","photos":[],"count_time":{"symbolsCount":894,"symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":13,"path":"api/tags/Python.json"},{"name":"递归","slug":"递归","count":1,"path":"api/tags/递归.json"},{"name":"动态规划","slug":"动态规划","count":1,"path":"api/tags/动态规划.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}},"next_post":{"title":"1734解码异或的排列","uid":"378da439daa2ee05d165c8ebd4326ea7","slug":"1734解码异或的排列","date":"2021-05-12T04:29:27.000Z","updated":"2021-05-31T06:07:52.755Z","comments":true,"path":"api/articles/1734解码异或的排列.json","keywords":null,"cover":"/images/banners/VCG41N1126025444.jpg","text":"给你一个整数数组 perm ，它是前 n 个正整数的排列，且 n 是个 奇数 。它被加密成另一个长度为 n - 1 的整数数组 encoded ，满足 encoded[i] = perm[i] XOR perm[i + 1] 。比方说，如果 perm = [1,3,2] ，那么 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":12,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":11,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":13,"path":"api/tags/Python.json"},{"name":"异或","slug":"异或","count":2,"path":"api/tags/异或.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}
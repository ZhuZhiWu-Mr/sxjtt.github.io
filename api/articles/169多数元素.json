{"title":"169多数元素","uid":"fdf447c09b614244b1d615663633680c","slug":"169多数元素","date":"2021-05-06T13:19:52.000Z","updated":"2021-05-06T15:26:09.202Z","comments":true,"path":"api/articles/169多数元素.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","content":"<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<h2 id=\"一、解法一-使用消除法\"><a href=\"#一、解法一-使用消除法\" class=\"headerlink\" title=\"一、解法一 使用消除法\"></a>一、解法一 使用消除法</h2><p><strong>此解法扣重点：出现次数会大于【n/2】的元素</strong></p>\n<p><strong>（1）从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个，以一换一去换，最多的那一队，怎么都会多1个。</strong></p>\n<p>使用举例：</p>\n<p>​        现在去打战，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利，其他国家的人相互攻击，只要不打内战，只有赢家能扛到最后，可以通过这个思路先自己写一遍代码，写不出，可以参考以下，如有不好的地方，可以评论留言。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    re_nu <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> re_nu<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                re_nu <span class=\"token operator\">=</span> num\n                <span class=\"token keyword\">continue</span>\n            count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> re_nu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"二、解法二-使用Hash\"><a href=\"#二、解法二-使用Hash\" class=\"headerlink\" title=\"二、解法二 使用Hash\"></a>二、解法二 使用Hash</h2><p><strong>这就不多做解释了，看代码吧</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        hashtable <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> num <span class=\"token keyword\">in</span> hashtable<span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                hashtable<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 获取dict value最大的key值。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>hashtable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。 一、解法一 使用消除法此解法扣重点：出现次数会大于【n/2】的元素 （1）从第一个数开始count=1，遇到相同的...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":7,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Hash","slug":"Hash","count":3,"path":"api/tags/Hash.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%A7%A3%E6%B3%95%E4%B8%80-%E4%BD%BF%E7%94%A8%E6%B6%88%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">一、解法一 使用消除法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%A7%A3%E6%B3%95%E4%BA%8C-%E4%BD%BF%E7%94%A8Hash\"><span class=\"toc-text\">二、解法二 使用Hash</span></a></li></ol>","author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"mapped":true,"prev_post":{"title":"TCP和UDP协议","uid":"d4cfe049c5b6be882045489e2054f761","slug":"TCP和UDP协议","date":"2021-05-10T07:43:32.000Z","updated":"2021-05-12T06:54:47.079Z","comments":true,"path":"api/articles/TCP和UDP协议.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","text":"TCP的三次握手和四次挥手","link":"","photos":[],"count_time":{"symbolsCount":13,"symbolsTime":"1 mins."},"categories":[{"name":"网络","slug":"网络","count":1,"path":"api/categories/网络.json"}],"tags":[{"name":"TCP","slug":"TCP","count":1,"path":"api/tags/TCP.json"},{"name":"UDP","slug":"UDP","count":1,"path":"api/tags/UDP.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}},"feature":true},"next_post":{"title":"136只出现一次的数字 LeetCode","uid":"35c279d773f512ff2cf029127b15b0e0","slug":"136只出现一次的数字","date":"2021-05-05T12:27:25.000Z","updated":"2021-05-06T13:35:06.030Z","comments":true,"path":"api/articles/136只出现一次的数字.json","keywords":null,"cover":"/images/banners/VCG41186545379.jpg","text":"题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 示例 1: 输入: [2,2,1]输出: 1示例 2: 输入: [4,1,2,1,2]输出: 4...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":7,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":7,"path":"api/tags/算法.json"},{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"异或","slug":"异或","count":2,"path":"api/tags/异或.json"}],"author":{"name":"阿朱","slug":"blog-author","avatar":"/images/head.jpg","link":"/","description":"所行皆坦途","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/382729258"},"github":{"icon":"/svg/github.svg","link":"https://github.com/sxjtt"}}}}}}